<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MGS.Common</name>
    </assembly>
    <members>
        <member name="T:MGS.Common.Converter.ArrayConverter">
            <summary>
            Converter of array.
            </summary>
        </member>
        <member name="M:MGS.Common.Converter.ArrayConverter.ToTwoDimention``1(``0[],System.Int32,System.Int32)">
            <summary>
            Convert one dimention array to two dimentions array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="array">Source array.</param>
            <param name="row">Two dimention array's row.</param>
            <param name="column">Two dimention array's column.</param>
            <returns>Two dimentions array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ArrayConverter.ToThreeDimention``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert one dimention array to three dimentions array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="array">Source array.</param>
            <param name="layer">Three dimention array's layer.</param>
            <param name="row">Three dimention array's row.</param>
            <param name="column">Three dimention array's column.</param>
            <returns>Three dimentions array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ArrayConverter.ToOneDimention``1(``0[0:,0:])">
            <summary>
            Convert two dimention array to one dimentions array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="array">Source array.</param>
            <returns>One dimentions array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ArrayConverter.ToOneDimention``1(``0[0:,0:,0:])">
            <summary>
            Convert three dimention array to one dimentions array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="array">Source array.</param>
            <returns>One dimentions array.</returns>
        </member>
        <member name="T:MGS.Common.Converter.ByteConverter">
            <summary>
            Converter of byte array.
            </summary>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToBoolean(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to boolean array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Boolean count.</param>
            <returns>Boolean array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to Int16 array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Int16 count.</param>
            <returns>Int16 array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to Int32 array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Int32 count.</param>
            <returns>Int32 array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to Int64 array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Int64 count.</param>
            <returns>Int64 array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToChar(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to char array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Char count.</param>
            <returns>Char array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToSingle(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to single array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Single count.</param>
            <returns>Single array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to double array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Double count.</param>
            <returns>Double array.</returns>
        </member>
        <member name="T:MGS.Common.Converter.StructureConverter">
            <summary>
            Converter of structure.
            </summary>
        </member>
        <member name="M:MGS.Common.Converter.StructureConverter.FromByteArray``1(System.Byte[])">
            <summary>
            Convert byte array to structure.
            </summary>
            <typeparam name="T">Structure type.</typeparam>
            <param name="byteArray">Byte array.</param>
            <returns>Structure.</returns>
        </member>
        <member name="M:MGS.Common.Converter.StructureConverter.ToByteArray``1(``0)">
            <summary>
            Convert structure to byte array.
            </summary>
            <typeparam name="T">Structure type.</typeparam>
            <param name="structure">Structure.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="T:MGS.Common.Diagnostics.ProcessUtility">
            <summary>
            Utility for process.
            </summary>
        </member>
        <member name="M:MGS.Common.Diagnostics.ProcessUtility.StartProcess(System.String)">
            <summary>
            Start process from file.
            </summary>
            <param name="fileName">Path of process file.</param>
            <returns>Succeed?</returns>
        </member>
        <member name="M:MGS.Common.Diagnostics.ProcessUtility.KillProcess(System.String)">
            <summary>
            Kill process by name.
            </summary>
            <param name="processName">Name of process.</param>
            <returns>Succeed?</returns>
        </member>
        <member name="M:MGS.Common.Diagnostics.ProcessUtility.KillProcess(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Kill processes by names.
            </summary>
            <param name="processNames">Names of processes.</param>
            <returns>Succeed?</returns>
        </member>
        <member name="T:MGS.Common.Generic.GenericEvent">
            <summary>
            Generic event.
            </summary>
        </member>
        <member name="F:MGS.Common.Generic.GenericEvent.callback">
            <summary>
            Event callback.
            </summary>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent.AddListener(System.Action)">
            <summary>
            Add event listener.
            </summary>
            <param name="callback">Event callback.</param>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent.RemoveListener(System.Action)">
            <summary>
            Remove event listener.
            </summary>
            <param name="callback">Event callback.</param>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent.RemoveListeners">
            <summary>
            Remove all event listeners.
            </summary>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent.Invoke">
            <summary>
            Invoke event.
            </summary>
        </member>
        <member name="T:MGS.Common.Generic.GenericEvent`1">
            <summary>
            Generic event.
            </summary>
            <typeparam name="T">Specified type of event arg.</typeparam>
        </member>
        <member name="F:MGS.Common.Generic.GenericEvent`1.callback">
            <summary>
            Event callback.
            </summary>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent`1.AddListener(System.Action{`0})">
            <summary>
            Add event listener.
            </summary>
            <param name="callback">Event callback.</param>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent`1.RemoveListener(System.Action{`0})">
            <summary>
            Remove event listener.
            </summary>
            <param name="callback">Event callback.</param>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent`1.RemoveListeners">
            <summary>
            Remove all event listeners.
            </summary>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent`1.Invoke(`0)">
            <summary>
            Invoke event.
            </summary>
            <param name="arg">Arg of event.</param>
        </member>
        <member name="T:MGS.Common.Generic.GenericEvent`2">
            <summary>
            Generic event.
            </summary>
            <typeparam name="T1">Specified type of event arg1.</typeparam>
            <typeparam name="T2">Specified type of event arg2.</typeparam>
        </member>
        <member name="F:MGS.Common.Generic.GenericEvent`2.callback">
            <summary>
            Event callback.
            </summary>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent`2.AddListener(System.Action{`0,`1})">
            <summary>
            Add event listener.
            </summary>
            <param name="callback">Event callback.</param>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent`2.RemoveListener(System.Action{`0,`1})">
            <summary>
            Remove event listener.
            </summary>
            <param name="callback">Event callback.</param>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent`2.RemoveListeners">
            <summary>
            Remove all event listeners.
            </summary>
        </member>
        <member name="M:MGS.Common.Generic.GenericEvent`2.Invoke(`0,`1)">
            <summary>
            Invoke event.
            </summary>
            <param name="arg1">Arg1 of event.</param>
            <param name="arg2">Arg2 of event.</param>
        </member>
        <member name="T:MGS.Common.IO.DirectoryUtility">
            <summary>
            Utility for directory.
            </summary>
        </member>
        <member name="M:MGS.Common.IO.DirectoryUtility.RequireDirectory(System.String)">
            <summary>
            Require the directory of path exist.
            </summary>
            <param name="path">Directory or file path.</param>
            <returns>Succeed?</returns>
        </member>
        <member name="M:MGS.Common.IO.DirectoryUtility.CopyChildrenEntries(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{System.Single},System.Action{System.Boolean,System.String})">
            <summary>
            Copy the children entries of source to dest directory.
            </summary>
            <param name="sourceDir">Source dir.</param>
            <param name="destDir">Dest dir.</param>
            <param name="ignores">Ignore files or directories.</param>
            <param name="progressCallback">Progress callback.</param>
            <param name="completeCallback">Complete callback.</param>
        </member>
        <member name="M:MGS.Common.IO.DirectoryUtility.CopyChildrenEntriesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{System.Single},System.Action{System.Boolean,System.String})">
            <summary>
            Copy the children entries of source to dest directory async.
            </summary>
            <param name="sourceDir">Source dir.</param>
            <param name="destDir">Dest dir.</param>
            <param name="ignores">Ignore files or directories.</param>
            <param name="guid">Guid of async threadGuid of async thread [System will automatically assign if it is null or empty].</param>
            <param name="progressCallback">Progress callback.</param>
            <param name="completeCallback">Complete callback.</param>
            <returns>Guid of async thread.</returns>
        </member>
        <member name="M:MGS.Common.IO.DirectoryUtility.DeleteChildrenEntries(System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{System.Single},System.Action{System.Boolean,System.String})">
            <summary>
            Delete the children entries of the directory.
            </summary>
            <param name="destDir">Dest dir.</param>
            <param name="ignores">Ignore files or directories.</param>
            <param name="progressCallback">Progress callback.</param>
            <param name="completeCallback">Complete callback.</param>
        </member>
        <member name="M:MGS.Common.IO.DirectoryUtility.DeleteChildrenEntriesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{System.Single},System.Action{System.Boolean,System.String})">
            <summary>
            Delete the children entries of the directory async.
            </summary>
            <param name="destDir">Dest dir.</param>
            <param name="ignores">Ignore files or directories.</param>
            <param name="guid">Guid of async threadGuid of async thread [System will automatically assign if it is null or empty].</param>
            <param name="progressCallback">Progress callback.</param>
            <param name="completeCallback">Complete callback.</param>
            <returns>Guid of async thread.</returns>
        </member>
        <member name="M:MGS.Common.IO.DirectoryUtility.AbortAsync(System.String)">
            <summary>
            Abort Async thread.
            </summary>
            <param name="guid">Guid of async thread.</param>
        </member>
        <member name="T:MGS.Common.IO.FileUtility">
            <summary>
            Utility for file.
            </summary>
        </member>
        <member name="M:MGS.Common.IO.FileUtility.CalPageCount(System.String,System.Int32)">
            <summary>
            Calculate page count of file.
            </summary>
            <param name="filePath">Path of target file.</param>
            <param name="pageSize">Size of page.</param>
            <returns>Page count of file.</returns>
        </member>
        <member name="M:MGS.Common.IO.FileUtility.ReadPage(System.String,System.Int32,System.Int32)">
            <summary>
            Read the index page of file.
            </summary>
            <param name="filePath">Path of target file.</param>
            <param name="pageSize">Size of page.</param>
            <param name="pageIndex">Index of page.</param>
            <returns>Index page bytes.</returns>
        </member>
        <member name="M:MGS.Common.IO.FileUtility.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Read all lines of file.
            </summary>
            <param name="filePath">Path of target file.</param>
            <param name="encoding">Encoding of target file.</param>
            <returns>All lines from file.</returns>
        </member>
        <member name="T:MGS.Common.Crypto.MD5CryptoUtility">
            <summary>
            Utility for MD5 crypto service provider.
            </summary>
        </member>
        <member name="M:MGS.Common.Crypto.MD5CryptoUtility.ComputeHash(System.Byte[])">
            <summary>
            Compute hash of byte array.
            </summary>
            <param name="buffer">Source byte array.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="M:MGS.Common.Crypto.MD5CryptoUtility.ComputeHash(System.String)">
            <summary>
            Compute hash of string.
            </summary>
            <param name="source">Source string.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="M:MGS.Common.Crypto.MD5CryptoUtility.ComputeFileHash(System.String)">
            <summary>
            Compute hash of file.
            </summary>
            <param name="filePath">Path of source file.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="T:MGS.Common.Reflection.Reflector">
            <summary>
            Reflector for reflection.
            </summary>
        </member>
        <member name="M:MGS.Common.Reflection.Reflector.SetField(System.Object,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <param name="obj">The object whose field value will be set.</param>
            <param name="name">The string containing the name of the data field to get.</param>
            <param name="value">The value to assign to the field.</param>
            <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.</param>
        </member>
        <member name="M:MGS.Common.Reflection.Reflector.SetProperty(System.Object,System.String,System.Object,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Sets the value of the property supported by the given object.
            </summary>
            <param name="obj">The object whose property value will be set.</param>
            <param name="name">The string containing the name of the property to get.</param>
            <param name="value">The value to assign to the property.</param>
            <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.</param>
            <param name="index">Optional index values for indexed properties.</param>
        </member>
        <member name="M:MGS.Common.Reflection.Reflector.InvokeMethod(System.Object,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Invokes the method or constructor represented by the given object, using the specified parameters.
            </summary>
            <param name="obj">The object on which to invoke the method or constructor.</param>
            <param name="name">The string containing the name of the method to get.</param>
            <param name="parameters">An argument list for the invoked method or constructor.</param>
            <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.</param>
            <returns></returns>
        </member>
        <member name="T:MGS.Common.Threading.ThreadBridge">
            <summary>
            Bridge for thread.
            </summary>
        </member>
        <member name="F:MGS.Common.Threading.ThreadBridge.queue">
            <summary>
            Queue for actions.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.ThreadBridge.Enqueue(System.Action)">
            <summary>
            Enqueue an action.
            </summary>
            <param name="action">Register action.</param>
        </member>
        <member name="M:MGS.Common.Threading.ThreadBridge.Dequeue">
            <summary>
            Dequeue all actions.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.ThreadBridge.Dequeue(System.Int32)">
            <summary>
            Dequeue the number of count actions.
            </summary>
            <param name="count">Count of dequeue actions once.</param>
        </member>
        <member name="T:MGS.Common.Threading.ThreadUtility">
            <summary>
            Utility for thread.
            </summary>
        </member>
        <member name="F:MGS.Common.Threading.ThreadUtility.asyncs">
            <summary>
            Dictionary for asyncs.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.ThreadUtility.RunAsync(System.Action)">
            <summary>
            Async run action in a thread.
            </summary>
            <param name="action">Run action.</param>
            <returns>Thread instance.</returns>
        </member>
        <member name="M:MGS.Common.Threading.ThreadUtility.RunAsync(System.Action,System.String)">
            <summary>
            Async run action in a thread.
            </summary>
            <param name="action">Run action.</param>
            <param name="guid">Guid of async thread [System will automatically assign if it is null or empty].</param>
            <returns>Thread instance.</returns>
        </member>
        <member name="M:MGS.Common.Threading.ThreadUtility.AbortAsync(System.String)">
            <summary>
            Abort Async thread.
            </summary>
            <param name="guid">Guid of async thread.</param>
        </member>
    </members>
</doc>
